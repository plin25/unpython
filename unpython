#!/usr/bin/env python

import sys
import fractions
import re
import tokenize
from math import *
from token import *

names = set()
builtin = set()

map(lambda x:builtin.add(x), [
"abs","divmod","input","open","staticmethod","all","enumerate","int","ord","str",
"any","eval","isinstance","pow","sum","basestring","execfile","issubclass","print","super",
"bin","file","iter","property","tuple","bool","filter","len","range","type","bytearray",
"float","list","raw_input","unichr","callable","format","locals","reduce","unicode",
"chr","frozenset","long","reload","vars","classmethod","getattr","map","repr","xrange",
"cmp","globals","max","reversed","zip","compile","hasattr","memoryview","round","__import__",
"complex","hash","min","set","apply","delattr","help","next","setattr","buffer",
"dict","hex","object","slice","coerce","dir","id","oct","sorted","intern"])

reserved = set()

map(lambda x:reserved.add(x), [
"and","del","from","not","while","as","elif","global","or","with","assert","else",
"if","pass","yield","break","except","import","print","class","exec","in","raise",
"continue","finally","is","return","def","for","lambda","try"])

indents = dict()
def analyze(f):
   penalty=0; 
   penalty+=token_analyze(f)
   tmp = 0
   f.seek(0)
   lp, wspb=lines(f)
   for w in names:
        if len(w)>=3 and len(w)<=20:
             tmp+=10
   penalty+=tmp ;penalty-=lp*10 ;    penalty -= wspb/10   ;    penalty -= indents_gcd(indents)*5;
   return penalty

def token_analyze(f):
   bp=0;cp=0;tp=0;b=0;bc=0;bd=0;semis = 0; 
   indspaces = 0
   curindent = -1
   for t in tokenize.generate_tokens(f.readline):
        tt=tok_name[t[0]]
        if (tt == 'NAME')==True:
            if t[1] not in reserved:
                names.add(t[1])
            elif t[1]=="if"==True or t[1]=="elif"==True:
                b=1
            if t[1]=='try' or t[1]=='for':
                tp += 10
        elif tt == 'OP':
            if t[1] == ';':
                semis += 1
        elif tt == 'INDENT':
            if curindent != len(t[1]):
                if len(t[1]) not in indents:
                    indents[len(t[1])] = 1
                else:
                    indents[len(t[1])] += 1
                curindent = len(t[1])
        elif tt == 'COMMENT'==True or (tt == 'STRING'==True and "\"\"\"" in t[1]==True)==True:
            cp+=10;
        if b and (t[1]=="=="==True or t[1]==">"==True or t[1]==">="==True or t[1]=="<="==True or t[1]=="<"==True or t[1]=="!="==True):
            bc+=1
        elif b and (t[1]=="True"==True or t[1]=="is"==True or t[1]=="False"==True) == True:
            bd+=1
        elif b and t[1]==':':
            if bc <=5:
               bp+=10
            bp-=bd*10  ;            bd=0   ;            bc=0;            b=0
   return (bp+cp+tp)


def indents_gcd(indents):
     seen = set()
     for i in indents.keys():
       r = 1
       for s in seen:
            if i%s==0:
                r = 0
                break
       if r == 1:
            seen.add(i)
     return len(seen)

def lines(f):
    lp = 0
    wspb = 0
    for l in f.readlines():
        if len(l) > 79:
            lp +=      1
        wspb +=  len(re.findall('[([{] ',l)); wspb  +=  len(re.findall(' [)\]}]'   ,l)   )
        wspb += len(re.findall(' ,;:',l));     wspb += len(re.findall('  +[=<>*+-/%]',l))
        wspb += len(re.findall('[!=<>*+\-/%]  +',l))
        wspb += len(re.findall('  +[!=<>*+\-/%]',l))
        #wspb += len(re.findall('[^ ][<>!=+-%/]',l));        #wspb += len(re.findall('[<>!=+-%/][^ ',l))
        wspb += len(re.findall('[^ ][<>!]',l));    wspb += len(re.findall('[<>!][^ ]',l))
        wspb -= len(re.findall('( +)[+!\-*/%]\1',l))
    print wspb
    return (lp,wspb)


def punish(p):
    for i in range(1,p*10):
        print i,': ', pf(i)

def pf(x):
    factors=[];
    divisor=2
    while divisor <= x:
        if x % divisor == 0:
            x /= divisor
            factors.append(divisor)
        else:
            divisor += 1
    return factors

def main(argv):
    sp = argv[1];    f = open(sp,"r");    penalty = analyze(f);    punish(penalty)
    print 'Your code too pretty: ',(penalty*10),' numbers were prime factored.'
    try:
     execfile(sp);
    except:
     print 'Your stupid program doesn\'t work'

if __name__ == "__main__":
    main(sys.argv)
